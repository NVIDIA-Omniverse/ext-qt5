/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt PIM Module.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see http://www.qt.io/terms-conditions. For further
** information use the contact form at http://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: http://www.gnu.org/copyleft/fdl.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \module QtOrganizer
    \title Qt Organizer C++ Classes
    \ingroup modules
    \brief The QtOrganizer module allows access to calendar event information.

    The \l{Qt Organizer} API enables a client to request calendar, schedule and
    personal data from local or remote backends.

    To include the definitions of the module's classes, use the following
    directive:

    \snippet doc_src_qtorganizer.cpp include

    To link against the module, add this line to your \l qmake \c
    .pro file:

    \snippet doc_src_qtorganizer.pro organizer project modification

*/

/*!
    \title Qt Organizer C++ API
    \page organizerclasses.html

    The Organizer API allows access to calendar event information.
    For more details, see the \l {Qt Organizer Overview}.
    The following are the classes involved in this API.

    The \l{Qt Organizer C++ Classes} page has a list of all classes in
    Qt Organizer.

\section2 Main Classes

\annotatedlist organizer-main

\section2 QOrganizerItemDetail Leaf Classes

Several subclasses of \l{QOrganizerItemDetail} are provided as part of the
Organizer API.  They are general in design but are intended
to fulfill specific use-cases.  Please note that certain backends may
choose not to support one or more of these subclasses as they appear here;
they may offer their own which provide similar functionality.

\annotatedlist organizer-details

\section2 Asynchronous Requests

You may use either the \l{Qt Organizer Synchronous API}{synchronous}
or \l{Qt Organizer Asynchronous API}{asynchronous} API to access
functionality provided by a manager backend. The asynchronous API is
offered through subclasses of the \l{QOrganizerAbstractRequest} class:

\annotatedlist organizer-requests

\section2 Organizer Item Selection And Sorting

You may select an organizer item by specifying a unique item id, or by
supplying a \l{QOrganizerItemFilter} which matches the item or items they
wish to select.  The various derivatives of \l{QOrganizerItemFilter} allow for
fine-grained and flexible selection of organizer data according to various
criteria:

\annotatedlist organizer-filters


A client can also request that the results of such a selection be sorted,
by passing a \l{QOrganizerItemSortOrder} (or list of sort orders) to the
manager.

\section2 Implementing Backends

A backend implementor must implement the following interfaces:

\annotatedlist organizer-backends

For more information on this topic, see please see the documentation on
\l{Qt Organizer Manager Engines}{implementing manager engines}.

\section2 Synchronization and Serialization

The organizer API is used by the
\l {Qt Versit C++ API}* module.  It allows
serialization of a QOrganizerItem into an iCalendar document, and vice versa.

[*] Versit \reg is a trademark of the Internet Mail Consortium.

\section1 QML Types

Qt Organizer includes QML types that provide organizer functionality for
QML applications. The \l{Qt Organizer QML API} page contains more details about
the QML support. For a list of QML types, the \l{Qt Organizer QML Types} page
lists the types in Qt Organizer


*/
